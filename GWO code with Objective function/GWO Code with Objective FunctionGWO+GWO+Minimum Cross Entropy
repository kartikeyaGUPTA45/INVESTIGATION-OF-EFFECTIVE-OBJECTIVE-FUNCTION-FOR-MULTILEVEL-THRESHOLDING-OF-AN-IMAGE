%%%%%%%% New Program of Image multilevel thresholding%%%%%%%%%%%%%%%%%%%%%
close all
clear all
clc
% RGB or grayscale image loaded
% I = imread('baboon.tiff');
thresholds = 10;
th=num2str(thresholds);
 'GWO'
%  x          =          fix(clock);
% str         =         strtrim(cellstr(num2str(x'))');
% strs_spaces =        sprintf('-%s' ,str{:});
% trimmed     =        strtrim(strs_spaces);
% filename    =       strcat('GWO_Th_',th,trimmed);
% filename    =        strcat(filename,'.csv');
 

% fid =  fopen(filename,'w');
% fprintf(fid,'%s,%s,%s,%s,%s,%s\n','Image name','Thresholds','Mean_PSNR','SSIM','Mean_Obj_Val','STD');

for zt= 1:1
for counti = 1:1 %%% counti is representing the image number
 imgno =    counti 
% Targeting level is assigned
throughoutgbest_score = inf;
Max_iter  =    200 ; % Maximum numbef of iterations
popsize   = 30;
xtimes    =   100;

if imgno ==1
       I = imread('Army Man.jpg');
    I=rgb2gray(I);
    imgname = 'Army';
         elseif imgno ==2
    I = imread('Couple.jpg');
    I=rgb2gray(I);
    imgname = 'Couple';
      elseif imgno ==3
    I = imread('Factory.jpg');
    I=rgb2gray(I);
    imgname = 'Factory';
      elseif imgno ==4
    I = imread('flowers.jpg');
    I=rgb2gray(I);
    imgname = 'Flowers';
      elseif imgno ==5
    I = imread('horse.jpg');
    I=rgb2gray(I);
    imgname = 'Horse';
      elseif imgno ==6
    I = imread('Musician.jpg');
    I=rgb2gray(I);
    imgname = 'Musician';
      elseif imgno ==7
    I = imread('Policemen.jpg');
    I=rgb2gray(I);
    imgname = 'Policemen';
      elseif imgno ==8
    I = imread('polo.jpg');
    I=rgb2gray(I);
    imgname = 'Polo';
      elseif imgno ==9
    I = imread('surfer.jpg');
    I=rgb2gray(I);
    imgname = 'Surfer';
      elseif imgno ==10
    I = imread('Seller.jpg');
    I=rgb2gray(I);
    imgname = 'Seller';
    end

    
% The histograms are obtained if the image is RGB one for each channel if it is
% Only grayscale in grayscale.
if size(I,3) == 1 %grayscale image
    [n_countR, x_valueR] = imhist(I(:,:,1));
elseif size(I,3) == 3 %RGB image
    %Histogram for each RGB channel
    [n_countR, x_valueR] = imhist(I(:,:,1));
    [n_countG, x_valueG] = imhist(I(:,:,2));
    [n_countB, x_valueB] = imhist(I(:,:,3));
end


Nt = size(I,1) * size(I,2); %Total amount of pixels in the image ROWS X COLUMN

Lmax = 256;   %256 different maximum levels are considered in an image (i.e., 0 to 255)

 
% Distribution of probabilities of each histogram intensity level 0 - 256 
h=imhist(I);  % Find the histogram of the image 'I'

% Perform histogram normalization
[row col]=size(I);
nh=h/(row*col); % Normalized Histogram

% Cumulative Normalized Histogram
ch=zeros(256,1);
ch(1)=nh(1);
for i=2:256
    ch(i)=ch(i-1)+nh(i);
end



for i = 1:Lmax
    if size(I,3) == 1 
        %grayscale image
        probR(i) = n_countR(i) / Nt;
    elseif size(I,3) == 3 
        %RGB image    
        probR(i) = n_countR(i) / Nt;
        probG(i) = n_countG(i) / Nt;
        probB(i) = n_countB(i) / Nt;
    end
end


%%%%%%%    Here we start GSA Thing or some swarm intelligence thing      %%%%%%% %%%%%%%%%%%%%%%%%%%%
tic
for iii = 1:xtimes  % For statistical tests



n=popsize;
dim = thresholds;

 ub = ones(1,1) * Lmax;
 lb = ones(1,1);


Positions = rand(popsize,dim).*(ub-lb)+lb;
Positions = floor(Positions);

 for si=1:size(Positions,1) 
       Positions(si,:)=sort(Positions(si,:)); 
 end
  
%  fitness = Kapurs(popsize,thresholds,Positions,probR);

Alpha_pos=zeros(1,dim);
Alpha_score= inf; %change this to -inf for maximization problems

Beta_pos=zeros(1,dim);
Beta_score= inf; %change this to -inf for maximization problems

Delta_pos=zeros(1,dim);
Delta_score= inf; %change this to -inf for maximization problems

Convergence_curve=zeros(1,Max_iter);

iter=1;% Loop counter

   for i= 1:size(Positions,1) 
   fitness(i,:) = mce10Kartik(Positions(i,:),probR,ch);
end
   
      for i=1:size(Positions,1) 
        % Update Alpha, Beta, and Delta
        if fitness(i,1) < Alpha_score 
            Alpha_score = fitness(i,1); % Update alpha
            Alpha_pos = Positions(i,:);
        end
        
        if fitness(i,1) > Alpha_score && fitness(i,1) < Beta_score 
            Beta_score = fitness(i,1); % Update beta
            Beta_pos = Positions(i,:);
        end
        
        if fitness(i,1) > Alpha_score && fitness(i,1) > Beta_score && fitness(i,1) < Delta_score 
            Delta_score = fitness(i,1); % Update delta
            Delta_pos = Positions(i,:);
        end
    end



while iter < Max_iter

    a = 2-iter*((2)/Max_iter); % a decreases linearly fron 2 to 0
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%%%%%%%%%%%%%%%Predator Phase %%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    
    
    % Update the Position of search agents including omegas
    for i=1:size(Positions,1) 
        for j=1:size(Positions,2)     
            
         
                       
            r1=rand(); % r1 is a random number in [0,1]
            r2=rand(); % r2 is a random number in [0,1]
            
            A1=2*a*r1-a; % Equation (3.3)
            C1=2*r2; % Equation (3.4)
            
            D_alpha = abs(C1*Alpha_pos(1,j)- Positions(i,j)); % Equation (3.5)-part 1
            X1=Alpha_pos(j)-A1*D_alpha; % Equation (3.6)-part 1
                       
            r1=rand();
            r2=rand();
            
            A2=2*a*r1-a; % Equation (3.3)
            C2=2*r2; % Equation (3.4)
            
            D_beta=abs(C2*Beta_pos(1,j)- Positions(i,j)); % Equation (3.5)-part 2
            X2=Beta_pos(j)-A2*D_beta; % Equation (3.6)-part 2       
            
            r1=rand();
            r2=rand(); 
            
            A3=2*a*r1-a; % Equation (3.3)
            C3=2*r2; % Equation (3.4)
            
            D_delta=abs(C3*Delta_pos(1,j)-Positions(i,j)); % Equation (3.5)-part 3
            X3=Delta_pos(j)-A3*D_delta; % Equation (3.5)-part 3             
            
            Positions(i,j) = (X1+X2+X3)/3;    % Equation (3.7)
          
        end
        
        
        
        
        
        
    end
    
   
        
 for i=1:size(Positions,1)
         for j=1:dim               
             Positions(i,j) = abs(ceil(Positions(i,j)));
             
            if Positions(i,j) < 1 || Positions(i,j) > 255
                rndp = randperm(255);                 
               Positions(i,j)= rndp(i);
            end
         
         end
  end
       
  for si=1:size(Positions,1)
           Positions (si,:)=sort(Positions(si,:));
  end
        
   
    P = Positions;
  fitness = [];

for i= 1:size(Positions,1) 
   fitness(i,:) = mce10Kartik(Positions(i,:),probR,ch);
end

     
    for i=1:size(Positions,1) 
        % Update Alpha, Beta, and Delta
        if fitness(i,1) < Alpha_score 
            Alpha_score = fitness(i,1); % Update alpha
            Alpha_pos = Positions(i,:);
        end
        
        if fitness(i,1) > Alpha_score && fitness(i,1) < Beta_score 
            Beta_score = fitness(i,1); % Update beta
            Beta_pos = Positions(i,:);
        end
        
        if fitness(i,1) > Alpha_score && fitness(i,1) > Beta_score && fitness(i,1) < Delta_score 
            Delta_score = fitness(i,1); % Update delta
            Delta_pos = Positions(i,:);
        end
    end
 
    Convergence_curve(iter) = Alpha_score;

iter =iter+1;

end

     if  throughoutgbest_score > Alpha_score
     throughoutgbest_score = Alpha_score;
     throughoutgbest_pos = Alpha_pos;
     end

  if size(I,3) == 1
            BestvalR(counti,iii) = Alpha_score;
            
    elseif size(I,3) == 3    
            BestvalR(iii,:) = xBestR;
            BestvalG(iii,:) = xBestG;
            BestvalB(iii,:) = xBestB;
  end
  
  
     xBestR  =    Alpha_pos;
 gBestR = sort(xBestR);
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%FSIM starts %%%%%%%%%%%%%%%%
  fbest_pos = Alpha_pos;

Iout = imageGRAY(I, Alpha_pos);
 ssimval(counti,iii) = ssim(Iout, I);
 PSNRV(counti,iii)  = psnr(Iout, I);
 
  

%%%%%%%%%%%%%%%%%%FSIM ends%%%%%%%%%%%%%%
     
   

end
toc

  time(counti,zt) =toc;

 Best_Score(counti,:) = throughoutgbest_score;
 Best_pos(counti,:) = throughoutgbest_pos;




 xBestR  =   Alpha_pos;  
 xBestR  =   Alpha_pos;

if size(I,3) == 1 %grayscale image

       MEANR(counti,:) = mean(BestvalR(counti,:)); %Mean of fitness

      MEAN_PSNR(counti,1) = mean(PSNRV(counti,:));
     MEAN_SSIM(counti,:) = mean(ssimval(counti,:));
     
     

  
 end
% 
end

end
% writematrix(PSNRV,"Results.xlsx",'Sheet',1,'Range','G19:DB28');
% writematrix(time,"Results.xlsx",'Sheet',1,'Range','F49:F58');
% writematrix(ssimval,"Results.xlsx",'Sheet',1,'Range','G33:DB42');
% writematrix(BestvalR,"Results.xlsx",'Sheet',1,'Range','G4:DB13');

