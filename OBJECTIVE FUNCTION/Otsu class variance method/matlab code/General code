clc
clear all
 I = imread('lena.tiff');
 I = rgb2gray(I);
 histogram(I)
[n_countR, x_valueR] = imhist(I);

Nt = size(I,1) * size(I,2); %Total amount of pixels in the image ROWS X COLUMN

% Distribution of probabilities of each histogram intensity level 0 - 256 

for i = 1:256
    if size(I,3) == 1 
%         grayscale image
        probR(i,1) = n_countR(i,1) / Nt;
    elseif size(I,3) == 3 
%         RGB image    
        probR(i,1) = n_countR(i,1) / Nt;
        probG(i,1) = n_countG(i,1) / Nt;
        probB(i,1) = n_countB(i,1) / Nt;
    end
end

Thresholds = [73 109 136 160 188];
[a b] = size(Thresholds);
no_of_thresholds = b;  %%% in b we are storing number of thresholds value
sigma =0;

sum_probR=0;

for i=1:256
sum_probR = sum_probR + probR(i,1);
end


%%%%%%%%Calculation of Image Mean%%%%%
mean_class =0;
for i = 1:256
    if (probR(i,1))==0
     else
mean_class = mean_class +  (i) * probR(i,1)/sum_probR;
     end
end

%%%%%%%%%%%%%%%%%%%Calculation of Mean of Classes%%%%%%%%%%%%%

%%%%%for first class%%%%%%%

omega_1=0;
sigma1 = 0;
for i = 1:Thresholds(1,1)
     if (probR(i,1))==0
     else
omega_1 = omega_1 + probR(i,1);
    end
end

mean_1  = 0;
for i = 1:Thresholds(1,1)
    if (probR(i,1))==0
    else
mean_1  = mean_1 + i * probR(i,1)/omega_1;
     end
end


sigma1 = omega_1 * (mean_1 - mean_class)^2;

sigmai =0;

%%%%%%Calculation of mean and sigma of threshold +1 class to second last
%%%%%%class

for j = 2 : no_of_thresholds
    
    omega_i=0;
         for i = Thresholds(1,j-1)+1: Thresholds(1,j)
             if (probR(i,1))==0
     else
           omega_i = omega_i + probR(i,1);
              end
          end
    
    mean_i  = 0;
       for i = Thresholds(1,j-1)+1: Thresholds(1,j)
           if (probR(i,1))==0
     else
           mean_i  = mean_i + i * probR(i,1)/omega_i;
            end
       end


sigmai = sigmai +  omega_i * (mean_i - mean_class)^2;
  
end

%%%%%%%%%%%%%%%%%for last class%%%%%%%%%%%%%
  omega_last=0;
    mean_last = 0;
    sigmalast = 0;
for i = Thresholds(1,j)+1:256   %%% here j is coming from last loop calculations
     if (probR(i,1))==0
     else
omega_last = omega_last + probR(i,1);
     end
end

for i = Thresholds(1,j)+1 : 256
    if (probR(i,1))==0
    else
mean_last  = mean_last + i * probR(i,1)/omega_last;
     end
end

sigmalast = omega_last * (mean_last - mean_class)^2;

sigma = sigma1 + sigmai + sigmalast;
