
from skimage import io
from matplotlib import pyplot as plt
import numpy as np

img = io.imread("E:\\lena.tiff")
plt.imshow(img, cmap=plt.cm.gray, interpolation='nearest')  



#Let's clean the noise using edge preserving filter.
#As mentioned in previous tutorial, my favorite is NLM

from skimage.restoration import denoise_nl_means, estimate_sigma
from skimage import img_as_ubyte, img_as_float



float_img = img_as_float(img)
sigma_est = np.mean(estimate_sigma(float_img, multichannel=True))


denoise_img = denoise_nl_means(float_img, h=1.15 * sigma_est, fast_mode=False, 
                               patch_size=5, patch_distance=3, multichannel=True)
                           
denoise_img_as_8byte = img_as_ubyte(denoise_img)
#plt.imshow(denoise_img_as_8byte, cmap=plt.cm.gray, interpolation='nearest')

segm1 = (denoise_img_as_8byte <= 82)
segm2 = (denoise_img_as_8byte > 82) & (denoise_img_as_8byte <= 126)
segm3 = (denoise_img_as_8byte > 126) & (denoise_img_as_8byte <= 175)
segm4 = (denoise_img_as_8byte > 175)



#How to show all these images in single visualization?
#Construct a new empty image with same shape as original except with 3 layers.
#print(median_img.shape[0])
all_segments = np.zeros((denoise_img_as_8byte.shape[0], denoise_img_as_8byte.shape[1],3)) #nothing but denoise img size but blank

all_segments[segm1] = 0.1
all_segments[segm2] = 0.2
all_segments[segm3] = 0.3
all_segments[segm4]=0.4
plt.imshow(all_segments)

#Lot of yellow dots, red dots and stray dots. how to clean
#We can use binary opening and closing operations. Open takes care of isolated pixels within the window
#Closing takes care of isolated holes within the defined window





import numpy
from skimage import io
import tensorflow as tf

tf.compat.v1.disable_eager_execution()


def log10(x):
    numerator = tf.math.log(x)
    denominator = tf.math.log(tf.constant(10, dtype=numerator.dtype))
    return numerator / denominator





def psnr(im1, im2):
    img_arr1 = numpy.array(im1).astype('float32')
    img_arr2 = numpy.array(im2).astype('float32')
    mse = tf.reduce_mean(tf.math.squared_difference(img_arr1, img_arr2))
    psnr = tf.constant(255**2, dtype=tf.float32)/mse
    result = tf.constant(10, dtype=tf.float32)*log10(psnr)
    with tf.compat.v1.Session():
        result = result.eval()
    return result

psnr(img,all_segments)
