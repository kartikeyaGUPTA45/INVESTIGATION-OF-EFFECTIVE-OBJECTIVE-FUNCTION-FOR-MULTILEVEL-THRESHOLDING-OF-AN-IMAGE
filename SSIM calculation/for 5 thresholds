from skimage import io
from matplotlib import pyplot as plt
import numpy as np

img = io.imread("E:\\lena.tiff")
plt.imshow(img, cmap=plt.cm.gray, interpolation='nearest')

from skimage.restoration import denoise_nl_means, estimate_sigma
from skimage import img_as_ubyte, img_as_float

float_img = img_as_float(img)
sigma_est = np.mean(estimate_sigma(float_img, multichannel=True))


denoise_img = denoise_nl_means(float_img, h=1.15 * sigma_est, fast_mode=False, 
                               patch_size=5, patch_distance=3, multichannel=True)
                           
denoise_img_as_8byte = img_as_ubyte(denoise_img)

segm1 = (denoise_img_as_8byte <= 64)
segm2 = (denoise_img_as_8byte > 64) & (denoise_img_as_8byte <= 97)
segm3 = (denoise_img_as_8byte > 97) & (denoise_img_as_8byte <= 137)
segm4 = (denoise_img_as_8byte > 137) & (denoise_img_as_8byte <= 179)
segm5 = (denoise_img_as_8byte > 179)

all_segments = np.zeros((denoise_img_as_8byte.shape[0], denoise_img_as_8byte.shape[1],3)) #nothing but denoise img size but blank

all_segments[segm1] = 0.1
all_segments[segm2] = 0.2
all_segments[segm3] = 0.3
all_segments[segm4] = 0.4
all_segments[segm5] = 0.5

plt.imshow(all_segments,cmap='gray')

def mse(imageA, imageB):
	# the 'Mean Squared Error' between the two images is the
	# sum of the squared difference between the two images;
	# NOTE: the two images must have the same dimension
	err = np.sum((imageA.astype("float") - imageB.astype("float")) ** 2)
	err /= float(imageA.shape[0] * imageA.shape[1])
	
	# return the MSE, the lower the error, the more "similar"
	# the two images are
	return err

mse(img,all_segments)

import cv2
all_segments = np.full((512,512,3), 12, np.uint8)
gray_image = cv2.cvtColor(all_segments, cv2.COLOR_BGR2GRAY)
print(gray_image.shape)

img=cv2.imread("E:\\lena.tiff",0)
print(img.shape)

from skimage.measure import compare_ssim as ssim

def compare_images(imageA, imageB, title):
    # compute the mean squared error and structural similarity
    # index for the images
    m = 59476.350352516165
    s = ssim(imageA, imageB)
    # setup the figure
    fig = plt.figure(title)
    plt.suptitle("MSE: %.2f, SSIM: %.2f" % (m, s))
    # show first image
    ax = fig.add_subplot(1, 2, 1)
    plt.imshow(imageA, cmap = plt.cm.gray)
    plt.axis("off")
    # show the second image
    ax = fig.add_subplot(1, 2, 2)
    plt.imshow(imageB, cmap = plt.cm.gray)
    plt.axis("off")
    # show the images
    plt.show()
    
compare_images(img,gray_image,"img vs all_segments")
